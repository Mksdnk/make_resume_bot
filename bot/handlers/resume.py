import asyncio

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from bot.services.cache import cache_service
from bot.tasks import generate_resume_task
from bot.states.resume_states import ResumeStates

router = Router()

@router.message(ResumeStates.FULL_NAME)
async def full_name_process(message: Message, state: FSMContext):
    user_id = message.from_user.id 
    await cache_service.save_user_data(user_id, {'full_name': message.text})
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
    await state.set_state(ResumeStates.AGE)

@router.message(ResumeStates.AGE)
async def age_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'age': message.text})
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –∏ —Ç.–¥)")
    await state.set_state(ResumeStates.CONTACTS)

@router.message(ResumeStates.CONTACTS)
async def contacts_process(message: Message, state: FSMContext):
    user_id = message.from_user.id 
    await cache_service.save_user_data(user_id, {'contacts': message.text})
    await message.answer("üåÜ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
    await state.set_state(ResumeStates.PLACE_OF_RESIDENCE)

@router.message(ResumeStates.PLACE_OF_RESIDENCE)
async def place_of_residence_process(message: Message, state: FSMContext):
    user_id = message.from_user.id 
    await cache_service.save_user_data(user_id, {'place_of_residence': message.text})
    await message.answer("ü™™ –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–µ —É –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
    await state.set_state(ResumeStates.CITIZENSHIP)

@router.message(ResumeStates.CITIZENSHIP)
async def citienship_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'citizenship': message.text})
    await message.answer("üíº –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –∫ –ø–µ—Ä–µ–µ–∑–¥—É –∏–ª–∏ –∫–æ–º–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º?")
    await state.set_state(ResumeStates.REMOVAL)

@router.message(ResumeStates.REMOVAL)
async def removal_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'removal': message.text})
    await message.answer("üìë –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ, –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é. –ó–∞–Ω—è—Ç–æ—Å—Ç—å, –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã")
    await state.set_state(ResumeStates.DESIRED_POSITION)

@router.message(ResumeStates.DESIRED_POSITION)
async def desired_position_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'desired_position': message.text})
    await message.answer("üë®üèª‚Äçüíª –í–≤–≤–µ–¥–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã, –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏):")
    await state.set_state(ResumeStates.EXPERIENCE)

@router.message(ResumeStates.EXPERIENCE)
async def experience_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'experience': message.text})
    await message.answer("üéì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    await state.set_state(ResumeStates.EDUCATION)

@router.message(ResumeStates.EDUCATION)
async def education_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'education': message.text})
    await message.answer("üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏(–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ soft skills)")
    await state.set_state(ResumeStates.SKILLS)

@router.message(ResumeStates.SKILLS)
async def skills_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'skills': message.text})
    await message.answer("üöó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –≤–æ–∂–¥–µ–Ω–∏—è")
    await state.set_state(ResumeStates.DRIVING_EXP)

@router.message(ResumeStates.DRIVING_EXP)
async def skills_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'driving_exp': message.text})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ö–æ–±–±–∏)")
    await state.set_state(ResumeStates.ADDITIONAL)

@router.message(ResumeStates.ADDITIONAL)
async def additional_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await cache_service.save_user_data(user_id, {'additional': message.text})
    await message.answer("‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—à–µ —Ä–µ–∑—é–º–µ")
    
    user_data = await cache_service.get_user_data(user_id)
    task = generate_resume_task.genrate_ai_task.delay(user_data)
    await cache_service.save_task_id(user_id, task.id)
    await state.set_state(ResumeStates.WAITING_GENERATION)








