import asyncio

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BufferedInputFile
from bot.services.cache import cache_service
from bot.tasks import generate_resume_task
from bot.states.resume_states import ResumeStates
from celery.result import AsyncResult

router = Router()

@router.message(ResumeStates.WAITING_GENERATION)
async def generation_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    task_id = await cache_service.get_task_id(user_id)

    task: AsyncResult = AsyncResult(task_id)

    if (task.status == "PENDING"):
        await message.answer('‚ñ∂Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥—ë—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ')
    if (task.status == "SUCCESS"):
        resume_text = task.result
        await cache_service.save_user_data(user_id, {'resume': resume_text})

        preview = resume_text[:1500] + "..." if len(resume_text) > 1500 else resume_text
        await message.answer(f'‚úÖ–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ! –ü—Ä–¥–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{preview}\n –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–µ—Ç–µ "–¥–∞", –∏–Ω–∞—á–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—é–º–µ, –≤–Ω–∏–º–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ä–∞–∑–º–µ—Ç–∫—É markdown –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ pdf —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏')
        await state.set_state(ResumeStates.REVIEW)
    else:
        await message.answer(f'‚õîÔ∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {task.status}')
        state.clear()

@router.message(ResumeStates.REVIEW)
async def review_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await cache_service.get_user_data(user_id)
    resume_text: str
    if (message.text.lower() == '–¥–∞'):
        resume_text = user_data.get('resume', '')

    else:
        resume_text=message.text
        await cache_service.save_user_data(user_id, {'resume': resume_text})

    task = generate_resume_task.generate_pdf_task.delay(resume_text)
    await cache_service.save_task_id(user_id, task.id)

    await state.set_state(ResumeStates.WAITING_PDF)
    await message.answer('üìù –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF')
    
@router.message(ResumeStates.WAITING_PDF)
async def pdf_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    task_id = await cache_service.get_task_id(user_id)
    task: AsyncResult = AsyncResult(task_id)

    if(task.status == "PENDING"):
        await message.answer("üîÑ PDF –≤—Å–µ –µ—â–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    elif(task.status == "SUCCESS"):
        await message.answer_document(BufferedInputFile(file=task.result, filename='resume.pdf'), caption="‚úÖ –í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ!")
        await state.clear()
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF: {task.status}")
        await state.clear()
    


    

    